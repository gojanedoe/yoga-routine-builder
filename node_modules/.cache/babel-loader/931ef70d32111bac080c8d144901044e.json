{"ast":null,"code":"var _jsxFileName = \"/Users/kharbaugh829/Documents/LaunchCode/yoga-routine-builder/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport DraggablePoseCard from './components/DraggablePoseCard';\nimport PoseBank from './components/PoseBank';\nimport RoutineBuilder from './components/RoutineBuilder';\nimport '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { Container } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport yogaPoses from './data/yogaPoses.json';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport AudioPlayer from '';\nimport './App.css'; // const dummyPoses = [\n//   { id: 'pose-1', name: 'Pose 1' },\n//   { id: 'pose-2', name: 'Pose 2' },\n//   { id: 'pose-3', name: 'Pose 3' },\n//   { id: 'pose-4', name: 'Pose 4' },\n//   { id: 'pose-5', name: 'Pose 5' },\n//   { id: 'pose-6', name: 'Pose 6' },\n//   { id: 'pose-7', name: 'Pose 7' },\n//   { id: 'pose-8', name: 'Pose 8' },\n//   { id: 'pose-9', name: 'Pose 9' },\n//   { id: 'pose-10', name: 'Pose 10' }\n// ];\n// const Routine = [];\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction SimpleDialog(props) {\n  const {\n    onClose,\n    routine,\n    open\n  } = props;\n\n  const handleClose = () => {\n    onClose(routine);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Dialog, {\n    onClose: handleClose,\n    open: open,\n    children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n      children: \"Routine Playback\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AudioPlayer, {\n      elevation: 1,\n      width: \"500px\",\n      variation: \"primary\",\n      spacing: 3,\n      src: \"Assets/tree_(vrkasana).mp4\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_c = SimpleDialog;\n\nfunction App() {\n  _s();\n\n  const [poses, updatePoses] = useState(yogaPoses);\n  const [routine, updateRoutine] = useState([]);\n  const [open, setOpen] = React.useState(false);\n\n  const handleOnDragEnd = result => {\n    // If pose is not dragged to a valid destination, keep list the same\n    if (!result.destination) return;\n    const source = result.source.droppableId;\n    const sourceIndex = result.source.index;\n    const destination = result.destination.droppableId;\n    const destinationIndex = result.destination.index;\n\n    if (source === destination) {\n      // Grab poses from original list\n      const items = Array.from(source === 'column-1' ? poses : routine); // Grab moving pose & remove from list\n\n      const [reorderedItem] = items.splice(sourceIndex, 1); // Add moving pose to new spot (index) in list\n\n      items.splice(destinationIndex, 0, reorderedItem); //Update state\n\n      source === 'column-1' ? updatePoses(items) : updateRoutine(items);\n    } else if (source === 'column-1' && destination === 'column-2') {\n      // Grab poses from original lists\n      const fromItems = Array.from(poses);\n      const toItems = Array.from(routine); // Grab moving pose & remove from list\n\n      const [reorderedItem] = fromItems.splice(sourceIndex, 1); // Add moving pose to new spot (index) in list\n\n      toItems.splice(destinationIndex, 0, reorderedItem); //Update state\n\n      updatePoses(fromItems);\n      updateRoutine(toItems);\n    } else if (source === 'column-2' && destination === 'column-1') {\n      // Grab poses from original lists\n      const fromItems = Array.from(routine);\n      const toItems = Array.from(poses); // Grab moving pose & remove from list\n\n      const [reorderedItem] = fromItems.splice(sourceIndex, 1); // Add moving pose to new spot (index) in list\n\n      toItems.splice(destinationIndex, 0, reorderedItem); //Update state\n\n      updatePoses(toItems);\n      updateRoutine(fromItems);\n    }\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = value => {\n    setOpen(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(DragDropContext, {\n    onDragEnd: handleOnDragEnd,\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      className: \"landingContainer\",\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        className: \"landingGrid\",\n        direction: \"row\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(PoseBank, {\n          poses: poses\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: \"\\u2192\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoutineBuilder, {\n          routine: routine\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          onClick: handleClickOpen,\n          children: \"Start Routine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleDialog, {\n          routine: routine,\n          open: open,\n          onClose: handleClose\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"outlined\",\n          children: \"Save Routine\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"R/c5sQI1rYHG88JZaNxMU9Vxh5k=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"SimpleDialog\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/kharbaugh829/Documents/LaunchCode/yoga-routine-builder/src/App.js"],"names":["React","useState","DraggablePoseCard","PoseBank","RoutineBuilder","Grid","Container","Card","Button","yogaPoses","Dialog","DialogTitle","DragDropContext","Droppable","Draggable","AudioPlayer","SimpleDialog","props","onClose","routine","open","handleClose","App","poses","updatePoses","updateRoutine","setOpen","handleOnDragEnd","result","destination","source","droppableId","sourceIndex","index","destinationIndex","items","Array","from","reorderedItem","splice","fromItems","toItems","handleClickOpen","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport DraggablePoseCard from './components/DraggablePoseCard';\nimport PoseBank from './components/PoseBank';\nimport RoutineBuilder from './components/RoutineBuilder';\nimport '@material-ui/core';\nimport Grid from '@material-ui/core/Grid';\nimport { Container } from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport Button from '@material-ui/core/Button';\nimport yogaPoses from './data/yogaPoses.json';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport AudioPlayer from ''\nimport './App.css';\n\n\n// const dummyPoses = [\n//   { id: 'pose-1', name: 'Pose 1' },\n//   { id: 'pose-2', name: 'Pose 2' },\n//   { id: 'pose-3', name: 'Pose 3' },\n//   { id: 'pose-4', name: 'Pose 4' },\n//   { id: 'pose-5', name: 'Pose 5' },\n//   { id: 'pose-6', name: 'Pose 6' },\n//   { id: 'pose-7', name: 'Pose 7' },\n//   { id: 'pose-8', name: 'Pose 8' },\n//   { id: 'pose-9', name: 'Pose 9' },\n//   { id: 'pose-10', name: 'Pose 10' }\n// ];\n\n// const Routine = [];\nfunction SimpleDialog(props) {\n  const { onClose, routine, open } = props;\nconst handleClose =() =>{\n  onClose(routine)\n}\n\n  return (\n    <Dialog onClose={handleClose} open={open}>\n      <DialogTitle>Routine Playback</DialogTitle>\n     \n  <AudioPlayer\n    elevation={1}\n    width=\"500px\"\n    variation=\"primary\"\n    spacing={3}\n    src=\"Assets/tree_(vrkasana).mp4\"\n  />\n    </Dialog>\n  );\n}\nfunction App() {\n  const [poses, updatePoses] = useState(yogaPoses);\n  const [routine, updateRoutine] = useState([]);\n  const [open, setOpen] = React.useState(false);\n\n  const handleOnDragEnd = result => {\n    // If pose is not dragged to a valid destination, keep list the same\n    if (!result.destination) return;\n\n    const source = result.source.droppableId;\n    const sourceIndex = result.source.index;\n    const destination = result.destination.droppableId;\n    const destinationIndex = result.destination.index;\n\n    if (source === destination) {\n      // Grab poses from original list\n      const items = Array.from(source === 'column-1' ? poses : routine);\n\n      // Grab moving pose & remove from list\n      const [reorderedItem] = items.splice(sourceIndex, 1);\n\n      // Add moving pose to new spot (index) in list\n      items.splice(destinationIndex, 0, reorderedItem);\n\n      //Update state\n      source === 'column-1' ? updatePoses(items) : updateRoutine(items);\n    } else if (source === 'column-1' && destination === 'column-2') {\n      // Grab poses from original lists\n      const fromItems = Array.from(poses);\n      const toItems = Array.from(routine);\n\n      // Grab moving pose & remove from list\n      const [reorderedItem] = fromItems.splice(sourceIndex, 1);\n\n      // Add moving pose to new spot (index) in list\n      toItems.splice(destinationIndex, 0, reorderedItem);\n\n      //Update state\n      updatePoses(fromItems);\n      updateRoutine(toItems);\n    } else if (source === 'column-2' && destination === 'column-1') {\n      // Grab poses from original lists\n      const fromItems = Array.from(routine);\n      const toItems = Array.from(poses);\n\n      // Grab moving pose & remove from list\n      const [reorderedItem] = fromItems.splice(sourceIndex, 1);\n\n      // Add moving pose to new spot (index) in list\n      toItems.splice(destinationIndex, 0, reorderedItem);\n\n      //Update state\n      updatePoses(toItems);\n      updateRoutine(fromItems);\n    }\n  };\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n  const handleClose = value => {\n    setOpen(false);\n    \n  };\n\n  return (\n    <DragDropContext onDragEnd={handleOnDragEnd}>\n      <Container className=\"landingContainer\">\n        <Grid\n          container\n          className=\"landingGrid\"\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          spacing={2}\n        >\n          {/* ---- LEFT COLUMN ---- */}\n          <PoseBank poses={poses} />\n\n          {/* ---- MIDDLE COLUMN ---- */}\n          <Grid item xs={4}>\n            →\n          </Grid>\n          {/* ---- RIGHT COLUMN ---- */}\n          <RoutineBuilder routine={routine} />\n\n          <Button variant=\"outlined\" onClick={handleClickOpen}>\n            Start Routine\n          </Button>\n\n          <SimpleDialog routine={routine} open={open} onClose={handleClose} />\n\n          <Button variant=\"outlined\">Save Routine</Button>\n        </Grid>\n      </Container>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}